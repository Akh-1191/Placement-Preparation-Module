class Solution {
public:
int bn(vector<int>& nums,int s,int e,int target)
{
    while(s<=e)
    {
        int m=s+(e-s)/2;
        if(nums[m]==target)
        return m;
        else if(nums[m]<target)
        s=m+1;
        else 
        e=m-1;
    }
    return -1;

}
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int start=0;
        int end=n-1;
        int index=0;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            int next=(mid+1)%n;
            int prev=(mid+n-1)%n;
            if(nums[mid]<nums[prev] && nums[mid]<nums[next])
            {
                //cout<<mid<<endl;
                index=mid;
                break;
            }
            else if(nums[mid]<nums[end])
            end=mid-1;
              else 
              start=mid+1;
        }
        int a1=bn(nums,0,index-1,target);
        int a2=bn(nums,index,n-1,target);
        return max(a1,a2);
      
    }
};
